Since the beginning of this project, tests have been well written and well kept. Both 2013’s COS 243 class and 2014’s seniors chose to use test-driven development methodologies. Their choice to program in this manner has resulted in an excellent test suite and a strong application.
 
The nature of this project simply demands testing. Because there is not consistent work being done on the project and the team working on the project changes frequently, tests serve as a backbone for maintaining the project. Without the tests, inconsistencies would arise often, and the learning curve for working on the project would be even larger than it already is. While our team did not develop in a test-driven manner, we were diligent to maintain the test suite well. This maintenance needed to be done in two ways: both in keeping previous tests relevant and correct, but also in writing new tests for the newly created features.

As you begin working on the project, we would strongly encourage you to consider using a test-driven development methodology. The long-term benefits outweigh the short-term struggles. To help you feel comfortable with this test suite, the following information will be helpful.

We are using RSpec and Capybara to run our tests. Simple research about these will give all team members a foundation for understanding how to test. Now to answer the most basic first step--how do I run the test suite? Simply type “rspec” into the command line and press return. This command will run all the tests for the system and display a total amount of tests, a total amount of failures, and a total amount of pending tests. In general, pending test results are not a top priority. As the amount of tests continues to increase, it takes longer to run all the tests. It can be helpful to only run tests from one file (if you know the specific part of the system you want to test). To do so, simply type “rspec”, a space, and the name of the test file. For example, “rspec spec/features/matches_spec.rb”. 

The next question is how to interact with the test suite. There is a directory in the top level of your hierarchy called “spec”. All the tests, test helpers, factories, and other necessary testing files live inside this folder. From here, most tests live in the “features” or “models” folders. Open a few test files in these folders and get acquainted with what is happening in there. There is also a file called “factories.rb”. Using FactoryGirl, objects are created in the factories.rb file that are used for the tests. If columns are added to any of the tables in the database, it is likely that this file will need to be modified to reflect the new database.

Much learning about testing comes by trial and error. At some point, you just have to go for it. Write some tests and see how it goes. Given the current state of the project, there are many well written tests in the suite. Some of these tests can used for a guideline on how to create a new test. 

Enjoy testing!
