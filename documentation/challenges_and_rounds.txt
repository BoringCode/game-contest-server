I. Files
In the exec_environment folder you have the match_runner which builds all of the matches.  The tournament_runner builds a tournament and calls to make all of the matches within it.  The check_for folders are ran to check for any match or tournament with the status of “waiting”.  
Besides that, everything for challenges and tournaments will be in your typical MVC setup.

II. Challenges and Rounds

The challenge feature is one of the main things we added this J-Term.  On the front-end for the challenge feature, a new match page will open allowing the user to select a start date and time, one of their own players, other players, and the number of matches to be ran. The only players that show up in the checkbox list in the form are those that are uploaded to the contest. Also, it is enforced in the controller that at least one of the user’s own players is selected. This is useful because the user can either challenge other players or have their own players challenge each other in order to determine the best player. It is also required in the form that the number of players selected matches the number of players specified in the referee. One of the biggest steps towards getting the challenges to actually save in the database was in differentiating them from the tournament matches. How the Game Contest Server was originally setup was that a tournament would be generated and then matches would be created from that tournament.

If the users wish to see their records and match outcomes, they can go to the players page. On the players page, there is a paginated list of every match (tournament and challenge) they have been apart of inside their entered contest. The record at the bottom shows how many games they’ve won vs. how many they have lost. The user is also able to search for matches based on the other players they faced and the record will change based on the results of the search. This way, students will be able to challenge their friends, search for those challenges, and see how they face up against specified players. If the user wants to see matches only related to a tournament, they can go to that tournament page and see how many games each player won along with a list of all the matches.

In order to run challenges, I had to change the database relationship between matches and referees to be between matches and contests instead. This allowed for the polymorphic relationship in matches to handle either a challenge match directly from contest
or a tournament match. Another important feature added was rounds. A match limit attribute was added to Referees in order for the contest creator to specify a reasonable limit of rounds the users can specify per challenge/tournament matches. A boolean attribute was also
added to the referee to allow the user to check whether the referee is capable of handling rounds or not. If the referee is not capable of handling rounds, rounds will be interpreted as new instances of separate matches. This is also why new round attributes were created in the matches and tournament tables. If the referee is capable of handling rounds, the number will be passed into the match and the referee will run multiple rounds within the match.

One specific problem I noticed was that tournaments only ran for contests that had games of two players. If there were any more players, the form would return an error. We decided that any type of elimination tournament should stay two player for now because we did not have time to make something more intricate due to the time restriction. However, I was able to change the round robin tournament so it allows games with more than two players (as long as it agrees with the number specified by the referee). How round robin works is that it will take the array of players, randomize the order, and play one game for every player involved. This allows for a more equal playing field and better results to determine the winner. However, if a number is specified for match rounds, the tournament will create that many matches for each compilation of players. Another problem with the previous Game Contest Server was that it lacked a definite
completion for tournaments and matches. When the clockwork daemon started running a tournament or match, it would change the status from "waiting" to "started" but it would never let the user know when it was completed. So I was able to go into the match_runner file and change each match status to "completed" when it successfully saves its information to the database. Tournament completion was a little more tricky because each tournament generates matches but never follows up with them after completion. The tournament simply creates as many matches as needed and quits, allowing the match checker to pick them up. So, when matches were finished running, if they were a part of a tournament, I made the code run through each match, check the completion, and change the tournament status accordingly.



III. Future work in this area
-have better ranking system for tournaments
-have more types of tournaments
-better search in matches page (different views for challenges and tournaments)
-Test rounds when Referee capable

